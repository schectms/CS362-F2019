gcc -c dominion.c -g  -Wall -fpic -coverage -lm -std=c99
dominion.c: In function ‘playMine’:
dominion.c:216:3: warning: suggest parentheses around assignment used as truth value [-Wparentheses]
   if (state->hand[currentPlayer][i] = j)
   ^
dominion.c: In function ‘playTribute’:
dominion.c:262:19: warning: value computed is not used [-Wunused-value]
   state->deckCount[nextPlayer--];
                   ^
gcc -o playdom playdom.c -g dominion.o rngs.o -Wall -fpic -coverage -lm -std=c99
gcc -o unitTest1 -g unitTest1.c dominion.o rngs.o interface.o -Wall -fpic -coverage -lm -std=c99
unitTest1.c: In function ‘main’:
unitTest1.c:85:35: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.supplyCount[estate] == testG.supplyCount[estate]);
                                   ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:86:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins + xtraCoins);
                     ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:87:23: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numBuys == G.numBuys + extraBuys);
                       ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:88:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] - discarded);
                                     ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:89:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer]);
                                     ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:90:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer] + discarded);
                                        ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:91:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:130:35: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.supplyCount[estate] == testG.supplyCount[estate] - estateGained);
                                   ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:132:23: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numBuys == G.numBuys + extraBuys);
                       ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:133:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + extraCard - discarded);
                                     ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:134:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer]);
                                     ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:135:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer] + discarded);
                                        ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:136:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:166:35: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.supplyCount[estate] == testG.supplyCount[estate] - estateGained);
                                   ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:168:23: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numBuys == G.numBuys + extraBuys);
                       ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:169:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + extraCard - discarded);
                                     ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:170:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer]);
                                     ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:171:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer] + discarded);
                                        ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:172:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest1.c:14:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest1.c:28:58: warning: unused variable ‘bonus’ [-Wunused-variable]
  int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
                                                          ^
unitTest1.c:28:45: warning: unused variable ‘choice3’ [-Wunused-variable]
  int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
                                             ^
unitTest1.c:28:32: warning: unused variable ‘choice2’ [-Wunused-variable]
  int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
                                ^
unitTest1.c:28:6: warning: unused variable ‘handpos’ [-Wunused-variable]
  int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
      ^
unitTest1.c:24:6: warning: unused variable ‘shuffledCards’ [-Wunused-variable]
  int shuffledCards = 0;
      ^
gcc -o unitTest2 -g unitTest2.c dominion.o rngs.o interface.o -Wall -fpic -coverage -lm -std=c99
unitTest2.c:12:0: warning: "assert" redefined [enabled by default]
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
 ^
In file included from unitTest2.c:5:0:
/usr/include/assert.h:86:0: note: this is the location of the previous definition
 # define assert(expr)       \
 ^
unitTest2.c: In function ‘main’:
unitTest2.c:51:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins + xtraCoins);
                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:52:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions + extraActions);
                          ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:53:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] - discarded);
                                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:54:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer]);
                                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:55:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer] + discarded);
                                        ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:56:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:57:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins + xtraCoins);
                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:102:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins + xtraCoins);
                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:103:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions + extraActions);
                          ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:104:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == 4);
                                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:105:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == 4);
                                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:106:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer] + hc + discarded);
                                        ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:107:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer] + hc + discarded);
                                        ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:160:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins + xtraCoins);
                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:161:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions + extraActions);
                          ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:162:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == 4);
                                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:163:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == testG.handCount[nextPlayer]);
                                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:164:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer] + hc + discarded);
                                        ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:165:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:172:35: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.hand[nextPlayer][0] == G.hand[nextPlayer][0]);
                                   ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:173:35: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.hand[nextPlayer][1] == G.hand[nextPlayer][1]);
                                   ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:174:35: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.hand[nextPlayer][2] == G.hand[nextPlayer][2]);
                                   ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:96:6: warning: variable ‘hc1’ set but not used [-Wunused-but-set-variable]
  int hc1 = G.handCount[nextPlayer];
      ^
unitTest2.c:23:15: warning: unused variable ‘remove2’ [-Wunused-variable]
  int remove1, remove2;
               ^
unitTest2.c:23:6: warning: unused variable ‘remove1’ [-Wunused-variable]
  int remove1, remove2;
      ^
unitTest2.c:22:58: warning: unused variable ‘bonus’ [-Wunused-variable]
  int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
                                                          ^
unitTest2.c:22:45: warning: unused variable ‘choice3’ [-Wunused-variable]
  int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
                                             ^
unitTest2.c:21:12: warning: unused variable ‘m’ [-Wunused-variable]
  int i, j, m;
            ^
unitTest2.c:21:9: warning: unused variable ‘j’ [-Wunused-variable]
  int i, j, m;
         ^
unitTest2.c:21:6: warning: unused variable ‘i’ [-Wunused-variable]
  int i, j, m;
      ^
unitTest2.c:18:6: warning: unused variable ‘shuffledCards’ [-Wunused-variable]
  int shuffledCards = 0;
      ^
unitTest2.c:15:6: warning: variable ‘newCards’ set but not used [-Wunused-but-set-variable]
  int newCards = 0;
      ^
gcc -o unitTest3 -g unitTest3.c dominion.o rngs.o interface.o -Wall -fpic -coverage -lm -std=c99
unitTest3.c:12:0: warning: "assert" redefined [enabled by default]
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
 ^
In file included from unitTest3.c:5:0:
/usr/include/assert.h:86:0: note: this is the location of the previous definition
 # define assert(expr)       \
 ^
unitTest3.c: In function ‘main’:
unitTest3.c:46:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins);
                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:47:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions);
                          ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:48:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer]);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:49:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer]);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:50:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer]);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:51:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:52:30: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.supplyCount[d] == testG.supplyCount[d]);
                              ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:63:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins);
                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:64:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions);
                          ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:65:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer]);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:66:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer]);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:67:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer]);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:68:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:69:30: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.supplyCount[d] == testG.supplyCount[d]);
                              ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:100:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins);
                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:101:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions);
                          ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:102:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] - discarded - choice2);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:103:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer] + 1);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:104:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer] - discarded);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:105:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:106:30: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.supplyCount[d] == testG.supplyCount[d] + choice2);
                              ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:125:24: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(cardsDiscarded == (cardsToBeDiscarded - choice2));
                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:126:24: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(cardCountAfter == currentCardCount + choice2);
                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:157:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins);
                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:158:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions);
                          ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:159:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] - discarded - choice2);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:160:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer] + choice2);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:161:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer] - discarded);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:162:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:163:30: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.supplyCount[d] == testG.supplyCount[d] + choice2);
                              ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:183:24: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(cardsDiscarded == (cardsToBeDiscarded - choice2));
                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:184:24: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(cardCountAfter == currentCardCount + choice2);
                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:200:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins);
                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:201:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions);
                          ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:202:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer]);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:203:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer]);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:204:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer]);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:205:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:206:30: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.supplyCount[d] == testG.supplyCount[d]);
                              ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:24:58: warning: unused variable ‘bonus’ [-Wunused-variable]
  int handpos = 0, choice1 = 1, choice2 = 0, choice3 = 0, bonus = 0;
                                                          ^
unitTest3.c:24:45: warning: unused variable ‘choice3’ [-Wunused-variable]
  int handpos = 0, choice1 = 1, choice2 = 0, choice3 = 0, bonus = 0;
                                             ^
unitTest3.c:22:6: warning: unused variable ‘i’ [-Wunused-variable]
  int i; //looping variable
      ^
unitTest3.c:20:6: warning: unused variable ‘estateGained’ [-Wunused-variable]
  int estateGained = 0;
      ^
unitTest3.c:19:6: warning: unused variable ‘extraBuys’ [-Wunused-variable]
  int extraBuys = 1;
      ^
unitTest3.c:18:6: warning: unused variable ‘xtraCoins’ [-Wunused-variable]
  int xtraCoins = 0;
      ^
gcc -o unitTest4 -g unitTest4.c dominion.o rngs.o interface.o -Wall -fpic -coverage -lm -std=c99
unitTest4.c:11:0: warning: "assert" redefined [enabled by default]
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
 ^
In file included from unitTest4.c:5:0:
/usr/include/assert.h:86:0: note: this is the location of the previous definition
 # define assert(expr)       \
 ^
unitTest4.c: In function ‘main’:
unitTest4.c:47:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins);
                     ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:48:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer]);
                                     ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:49:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer]);
                                     ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:50:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer]);
                                        ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:51:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:64:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins);
                     ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:65:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer]);
                                     ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:66:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer]);
                                     ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:67:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer]);
                                        ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:68:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:81:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins);
                     ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:82:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer]);
                                     ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:83:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer]);
                                     ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:84:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer]);
                                        ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:85:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:108:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins);
                     ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:109:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] - 1);
                                     ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:110:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer]);
                                     ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:111:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer] - 2);
                                        ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:112:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:113:36: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.supplyCount[choice2] == G.supplyCount[choice2] - 1);
                                    ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:126:13: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(num2==num+1);
             ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:127:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(G.hand[thisPlayer][choice1] != choice2);
                                     ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:140:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins);
                     ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:141:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer]);
                                     ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:142:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer]);
                                     ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:143:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer]);
                                        ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:144:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest4.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest4.c:96:6: warning: unused variable ‘d’ [-Wunused-variable]
  int d = G.hand[thisPlayer][choice1];
      ^
unitTest4.c:23:58: warning: unused variable ‘bonus’ [-Wunused-variable]
  int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
                                                          ^
unitTest4.c:23:45: warning: unused variable ‘choice3’ [-Wunused-variable]
  int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
                                             ^
unitTest4.c:19:6: warning: unused variable ‘estateGained’ [-Wunused-variable]
  int estateGained = 0;
      ^
unitTest4.c:18:6: warning: unused variable ‘extraBuys’ [-Wunused-variable]
  int extraBuys = 1;
      ^
unitTest4.c:17:6: warning: unused variable ‘xtraCoins’ [-Wunused-variable]
  int xtraCoins = 0;
      ^
unitTest4.c:16:6: warning: unused variable ‘discarded’ [-Wunused-variable]
  int discarded = 1;
      ^
gcc -o unitTest5 -g unitTest5.c dominion.o rngs.o interface.o -Wall -fpic -coverage -lm -std=c99
unitTest5.c:11:0: warning: "assert" redefined [enabled by default]
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
 ^
In file included from unitTest5.c:5:0:
/usr/include/assert.h:86:0: note: this is the location of the previous definition
 # define assert(expr)       \
 ^
unitTest5.c: In function ‘main’:
unitTest5.c:49:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins + xtraCoins);
                     ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:50:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions + xtraActions);
                          ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:51:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] +xtraCards-discarded);
                                     ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:52:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.deckCount[nextPlayer] == G.deckCount[nextPlayer]);
                                     ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:53:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]-1);
                                        ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:67:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins + xtraCoins);
                     ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:68:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions + xtraActions);
                          ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:69:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + xtraCards - discarded);
                                     ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:70:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.deckCount[nextPlayer] == G.deckCount[nextPlayer]-1);
                                     ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:71:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:83:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins + xtraCoins);
                     ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:84:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions + xtraActions);
                          ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:85:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + xtraCards - discarded);
                                     ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:99:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins + xtraCoins);
                     ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:100:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions + xtraActions);
                          ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:101:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + xtraCards - discarded);
                                     ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:102:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]-2);
                                        ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:117:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins + xtraCoins);
                     ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:118:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions + xtraActions);
                          ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:119:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + xtraCards - discarded);
                                     ^
unitTest5.c:11:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest5.c:48:6: warning: unused variable ‘discardnp’ [-Wunused-variable]
  int discardnp = 1;
      ^
unitTest5.c:22:58: warning: unused variable ‘bonus’ [-Wunused-variable]
  int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
                                                          ^
unitTest5.c:22:45: warning: unused variable ‘choice3’ [-Wunused-variable]
  int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
                                             ^
unitTest5.c:22:32: warning: unused variable ‘choice2’ [-Wunused-variable]
  int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
                                ^
unitTest5.c:22:19: warning: unused variable ‘choice1’ [-Wunused-variable]
  int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
                   ^
unitTest5.c:22:6: warning: unused variable ‘handpos’ [-Wunused-variable]
  int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
      ^
unitTest5.c:20:6: warning: unused variable ‘i’ [-Wunused-variable]
  int i; //looping variable
      ^
unitTest5.c:18:6: warning: unused variable ‘estateGained’ [-Wunused-variable]
  int estateGained = 0;
      ^
unitTest5.c:17:6: warning: unused variable ‘extraBuys’ [-Wunused-variable]
  int extraBuys = 1;
      ^
