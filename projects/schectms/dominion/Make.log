make: Warning: File `randomtestcard1.c' has modification time 12 s in the future
gcc -o randomtest1 randomtestcard1.c -g dominion.o rngs.o interface.o -Wall -fpic -coverage -lm -std=c99
randomtestcard1.c:13:0: warning: "assert" redefined [enabled by default]
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
 ^
In file included from randomtestcard1.c:5:0:
/usr/include/assert.h:86:0: note: this is the location of the previous definition
 # define assert(expr)       \
 ^
randomtestcard1.c: In function ‘main’:
randomtestcard1.c:18:2: warning: implicit declaration of function ‘time’ [-Wimplicit-function-declaration]
  srand(time(NULL));
  ^
randomtestcard1.c:72:24: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
    assert(testG.numBuys==G.numBuys+1); //buys should be incremented
                        ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:73:22: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
    assert(testG.coins==G.coins+4); //should have an additional 4 coins
                      ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:79:31: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
      assert(testG.handCount[a]==G.handCount[a]);  
                               ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:80:34: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
      assert(testG.discardCount[a]==G.discardCount[a]);
                                  ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:84:31: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
      assert(testG.handCount[a]==G.handCount[a]-2); //current player has 2 less cards
                               ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:85:34: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
      assert(testG.discardCount[a]==G.discardCount[a]+1); //estate is now in discard pile
                                  ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:89:36: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
    assert(testG.supplyCount[estate]==G.supplyCount[estate]); //supply remins the same
                                    ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:90:53: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
                         assert(testG.playedCardCount==G.playedCardCount+1); //baron card in now in played cards
                                                     ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:98:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
    assert(numEstates==estateFound-1); //player should now have 1 less estate
                     ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:107:45: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
                         assert(testG.numBuys==G.numBuys+1); //buys shpuld be incremented
                                             ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:108:22: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
    assert(testG.coins==G.coins); //coin count stays the same
                      ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:111:58: warning: comparison between pointer and integer [enabled by default]
                                 assert(testG.handCount[a]==G.handCount); //no change to hand count for any palyers
                                                          ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:111:58: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
                                 assert(testG.handCount[a]==G.handCount); //no change to hand count for any palyers
                                                          ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:115:69: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
                                         assert(testG.discardCount[a]==G.discardCount[a]); //no estate discarded
                                                                     ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:119:69: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
                                         assert(testG.discardCount[a]==G.discardCount[a]); //all other players state unchanged 
                                                                     ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:123:36: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
    assert(testG.supplyCount[estate]==G.supplyCount[estate]-1);  //supply count decremented
                                    ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:124:32: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
    assert(testG.playedCardCount==G.playedCardCount+1); //baron card in playedCard
                                ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:131:42: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
                         assert(numEstates==estateFound+1); //player should now have 1 more estate
                                          ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:141:41: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
    assert(testG.handCount[currentPlayer]==G.handCount[currentPlayer]);
                                         ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:142:22: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
    assert(testG.coins==G.coins);
                      ^
randomtestcard1.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test1.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard1.c:64:11: warning: unused variable ‘c’ [-Wunused-variable]
   int a,b,c;
           ^
gcc -o randomtest3 randomtestcard3.c -g dominion.o rngs.o interface.o -Wall -fpic -coverage -lm -std=c99
randomtestcard3.c:13:0: warning: "assert" redefined [enabled by default]
 #define assert(x) {f=fopen("test3.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
 ^
In file included from randomtestcard3.c:5:0:
/usr/include/assert.h:86:0: note: this is the location of the previous definition
 # define assert(expr)       \
 ^
randomtestcard3.c: In function ‘main’:
randomtestcard3.c:18:2: warning: implicit declaration of function ‘time’ [-Wimplicit-function-declaration]
  srand(time(NULL));
  ^
randomtestcard3.c:99:23: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
     assert(testG.coins==G.coins +2); 
                       ^
randomtestcard3.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test3.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard3.c:105:42: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
     assert(testG.handCount[currentplayer]==G.handCount[currentplayer]+2);
                                          ^
randomtestcard3.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test3.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
randomtestcard3.c:110:28: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
     assert(testG.numActions==G.numActions +2);
                            ^
randomtestcard3.c:13:51: note: in definition of macro ‘assert’
 #define assert(x) {f=fopen("test3.txt", "a"); if (x == 0) fprintf(f, "Test Failed\n"); else fprintf(f, "Test Passed\n"); fclose(f);}
                                                   ^
make: warning:  Clock skew detected.  Your build may be incomplete.
