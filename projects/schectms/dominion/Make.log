gcc -o unitTest2 -g unitTest2.c dominion.o rngs.o interface.o -Wall -fpic -coverage -lm -std=c99
unitTest2.c:12:0: warning: "assert" redefined [enabled by default]
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
 ^
In file included from unitTest2.c:5:0:
/usr/include/assert.h:86:0: note: this is the location of the previous definition
 # define assert(expr)       \
 ^
unitTest2.c: In function ‘main’:
unitTest2.c:51:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins + xtraCoins);
                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:52:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions + extraActions);
                          ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:53:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] - discarded);
                                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:54:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer]);
                                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:55:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer] + discarded);
                                        ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:56:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:57:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins + xtraCoins);
                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:102:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins + xtraCoins);
                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:103:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions + extraActions);
                          ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:104:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == 4);
                                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:105:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == 4);
                                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:106:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer] + hc + discarded);
                                        ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:107:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer] + hc + discarded);
                                        ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:160:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins + xtraCoins);
                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:161:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions + extraActions);
                          ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:162:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == 4);
                                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:163:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == testG.handCount[nextPlayer]);
                                     ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:164:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer] + hc + discarded);
                                        ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:165:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:172:35: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.hand[nextPlayer][0] == G.hand[nextPlayer][0]);
                                   ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:173:35: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.hand[nextPlayer][1] == G.hand[nextPlayer][1]);
                                   ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:174:35: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.hand[nextPlayer][2] == G.hand[nextPlayer][2]);
                                   ^
unitTest2.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest2.c:96:6: warning: variable ‘hc1’ set but not used [-Wunused-but-set-variable]
  int hc1 = G.handCount[nextPlayer];
      ^
unitTest2.c:23:15: warning: unused variable ‘remove2’ [-Wunused-variable]
  int remove1, remove2;
               ^
unitTest2.c:23:6: warning: unused variable ‘remove1’ [-Wunused-variable]
  int remove1, remove2;
      ^
unitTest2.c:22:58: warning: unused variable ‘bonus’ [-Wunused-variable]
  int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
                                                          ^
unitTest2.c:22:45: warning: unused variable ‘choice3’ [-Wunused-variable]
  int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
                                             ^
unitTest2.c:21:12: warning: unused variable ‘m’ [-Wunused-variable]
  int i, j, m;
            ^
unitTest2.c:21:9: warning: unused variable ‘j’ [-Wunused-variable]
  int i, j, m;
         ^
unitTest2.c:21:6: warning: unused variable ‘i’ [-Wunused-variable]
  int i, j, m;
      ^
unitTest2.c:18:6: warning: unused variable ‘shuffledCards’ [-Wunused-variable]
  int shuffledCards = 0;
      ^
unitTest2.c:15:6: warning: variable ‘newCards’ set but not used [-Wunused-but-set-variable]
  int newCards = 0;
      ^
gcc -o unitTest3 -g unitTest3.c dominion.o rngs.o interface.o -Wall -fpic -coverage -lm -std=c99
unitTest3.c:12:0: warning: "assert" redefined [enabled by default]
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
 ^
In file included from unitTest3.c:5:0:
/usr/include/assert.h:86:0: note: this is the location of the previous definition
 # define assert(expr)       \
 ^
unitTest3.c: In function ‘main’:
unitTest3.c:46:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins);
                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:47:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions);
                          ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:48:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer]);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:49:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer]);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:50:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer]);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:51:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:52:30: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.supplyCount[d] == testG.supplyCount[d]);
                              ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:63:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins);
                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:64:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions);
                          ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:65:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer]);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:66:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer]);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:67:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer]);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:68:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:69:30: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.supplyCount[d] == testG.supplyCount[d]);
                              ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:82:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins);
                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:83:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions);
                          ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:84:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] - discarded - choice2);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:85:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer] + 1);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:86:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer] - discarded);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:87:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:88:30: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.supplyCount[d] == testG.supplyCount[d] + choice2);
                              ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:100:21: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.coins == G.coins);
                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:101:26: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.numActions == G.numActions);
                          ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:102:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] - discarded - choice2);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:103:37: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.handCount[nextPlayer] == G.handCount[nextPlayer] + choice2);
                                     ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:104:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[thisPlayer] == G.discardCount[thisPlayer] - discarded);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:105:40: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.discardCount[nextPlayer] == G.discardCount[nextPlayer]);
                                        ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:106:30: warning: suggest parentheses around comparison in operand of ‘==’ [-Wparentheses]
  assert(testG.supplyCount[d] == testG.supplyCount[d] + choice2);
                              ^
unitTest3.c:12:24: note: in definition of macro ‘assert’
 #define assert(x) {if (x == 0) printf("Test Failed\n"); else printf("Test Passed\n");}
                        ^
unitTest3.c:24:58: warning: unused variable ‘bonus’ [-Wunused-variable]
  int handpos = 0, choice1 = 1, choice2 = 0, choice3 = 0, bonus = 0;
                                                          ^
unitTest3.c:24:45: warning: unused variable ‘choice3’ [-Wunused-variable]
  int handpos = 0, choice1 = 1, choice2 = 0, choice3 = 0, bonus = 0;
                                             ^
unitTest3.c:22:6: warning: unused variable ‘i’ [-Wunused-variable]
  int i; //looping variable
      ^
unitTest3.c:20:6: warning: unused variable ‘estateGained’ [-Wunused-variable]
  int estateGained = 0;
      ^
unitTest3.c:19:6: warning: unused variable ‘extraBuys’ [-Wunused-variable]
  int extraBuys = 1;
      ^
unitTest3.c:18:6: warning: unused variable ‘xtraCoins’ [-Wunused-variable]
  int xtraCoins = 0;
      ^
